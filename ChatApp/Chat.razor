@page "/chat"
@using ChatApp.Models
@using ChatApp.Models.Responses
@using Markdig
@using Microsoft.JSInterop
@using MudBlazor
@using System.Net.Http.Headers
@inject HttpClient Http
@inject IJSRuntime JS
@inject IConfiguration Configuration

<style>
    /* Make the text within MudListItems selectable */
    .selectable-text {
        user-select: text; /* Enable text selection */
        cursor: text; /* Change the cursor to text selection cursor */
    }
</style>

<MudStack Class="m-4" Spacing="4">
    <MudText Typo="Typo.body1">
        Messages:
    </MudText>

    <MudList T="string" Selectable>
        @foreach (var message in messages)
        {
            <MudListItem T="string" Class="selectable-text" high Ripple="false">
                @if (message.IsUser)
                {
                    @($"{message.Role}:") @(new MarkupString(Markdown.ToHtml(message.Content)))
                }
                else
                {
                    @($"{message.Role}:") @(new MarkupString(Markdown.ToHtml(message.Content)))
                }
            </MudListItem>
        }
    </MudList>

    <MudTextField @bind-Value="userInput" Label="Enter your message" AutoGrow="true"/>

    <MudSelect T="string" Label="Select Provider" @bind-Value="selectedProvider" >
        @foreach (KeyValuePair<string, Provider> kvp in Configuration.Get<Dictionary<string, Provider>>() ?? [])
        {
            <MudSelectItem T="string" Value=@kvp.Key>@kvp.Key</MudSelectItem>
        }
    </MudSelect>

    <MudSelect T="string" Label="Select Model" @bind-Value="selectedModel">
        @foreach (string model in Configuration.GetSection($"{selectedProvider}:Models")?.Get<string[]>() ?? [])
        {
            <MudSelectItem T="string" Value=@model>@model</MudSelectItem>
        }
    </MudSelect>

    <MudButton OnClick="SendMessage" Color="Color.Primary">Send</MudButton>
</MudStack>